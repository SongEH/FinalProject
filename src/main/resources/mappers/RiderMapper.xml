<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="first.final_project.dao.RidersMapper">

    <!-- 전체조회 -->
    <select id="selectList" resultType="rider">
       select * from riders order by raiders_id
    </select>


    <!-- mem_idx 이용해서  MemberVo  구하기 -->
    <select id="selectOneFromId" parameterType="int" resultType="rider">
       select * from riders where raiders_id=#{raiders_id}
    </select>

    <!-- mem_id 이용해서  MemberVo  구하기 -->
    <select id="selectOneFromEmail" parameterType="String" resultType="rider">
       select * from riders where riders_email=#{riders_email}
    </select>

    <!-- 추가  
        #{mem_name} => vo.getMem_name()
   -->
    <insert id="insert" parameterType="rider">
      INSERT INTO riders
      (
      rider_name,
      riders_phone,
      riders_email,
      riders_pwd,
      riders_region
      )
      VALUES  (
        #{rider_name},
        #{riders_phone},
        #{riders_email},
        #{riders_pwd},
        #{riders_region}
    )
                                  
                                  
    </insert>

    <!-- 삭제  -->
    <delete id="delete" parameterType="int">
      delete from riders where raiders_id=#{ raiders_id }
    </delete>

    <!-- 수정  -->
    <update id="update" parameterType="rider">
      update riders 
             set riders_phone=#{ riders_phone }, riders_pwd=#{ riders_pwd }, riders_region=#{ riders_region}
      where raiders_id=#{ raiders_id }
    </update>


    <select id="getOrderById" parameterType="int" resultType="order">
        SELECT o.*, s.shop_name AS shopName, s.shop_status AS shopStatus
        FROM orders o
        JOIN shop s ON o.shop_id = s.shop_id
        WHERE  o.orders_id = #{orders_id}
    </select>

    <update id="updateOrderStatus">
        UPDATE orders SET orders_status = #{status} WHERE orders_id = #{orders_id}
    </update>

    <!-- <insert id="assignDelivery">
        INSERT INTO Deliveries (deliveries_id, raiders_id, deliveries_method, orders_id)
        VALUES (null, #{raiders_id}, #{deliveries_method}, #{orders_id})
    </insert> -->

    <insert id="assignDelivery" useGeneratedKeys="true" keyProperty="deliveries_id">
        INSERT INTO deliveries (raiders_id, deliveries_method, orders_id)
        VALUES (#{raiders_id}, #{deliveries_method}, #{orders_id})
    </insert>

    <insert id="insertDeliveryHistory">
        INSERT INTO delivery_history (delivery_history_id, delivery_history_status, deliveries_id)
        VALUES (null, #{status}, #{deliveries_id})
    </insert>


    <!-- Orders와 Shop을 조인하여 주문과 관련된 가게 정보를 가져옴 -->
    <select id="findOrdersByStatus" parameterType="map" resultType="order">
    SELECT o.*, s.shop_name AS shop_name, s.shop_addr AS shop_addr, 
        d.deliveries_method AS deliveries_method, 
        a.addr_line1 AS addr_line1, a.addr_line2 AS addr_line2, 
        m.member_nickname AS member_nickname, o.orders_drequest AS orders_drequest
    FROM orders o
    JOIN shop s ON o.shop_id = s.shop_id
    LEFT jOIN Deliveries d ON o.orders_id = d.orders_id
    JOIN addr a ON o.addr_id = a.addr_id
    JOIN member m ON a.member_id = m.member_id
    JOIN riders r ON r.raiders_id = #{raiders_id}
    WHERE o.orders_status = #{status}
    AND (
        r.riders_region IS NULL
        OR r.riders_region = ''
        OR s.shop_addr REGEXP REPLACE(r.riders_region, ',', '|')
    )
    ORDER BY orders_id
    </select>



    <select id="findOrdersByRiderAndStatus" parameterType="map" resultType="order">
        SELECT o.*, d.deliveries_method AS deliveries_method, s.shop_name AS shop_name, 
            s.shop_addr AS shop_addr, m.member_nickname AS member_nickname, 
            a.addr_line1 AS addr_line1, a.addr_line2 AS addr_line2, o.orders_drequest
        FROM orders o
        JOIN deliveries d ON o.orders_id = d.orders_id 
        JOIN (
            SELECT deliveries_id, delivery_history_status, delivery_history_id
            FROM delivery_history
            WHERE delivery_history_status IN ('배차 완료', '픽업 대기', '배달 중')
        ) dh ON d.deliveries_id = dh.deliveries_id 
        JOIN shop s ON o.shop_id = s.shop_id 
        JOIN addr a ON o.addr_id = a.addr_id
        JOIN member m ON a.member_id = m.member_id
        WHERE d.raiders_id = #{raiders_id}
        ORDER BY o.orders_id;
    </select>

    <select id="getAddrById" parameterType="int" resultType="addr">
        SELECT * FROM addr WHERE addr_id = #{addr_id}
    </select>

    <select id="getShopById" parameterType="int" resultType="shop">
        SELECT * FROM shop WHERE shop_id = #{shop_id}
    </select>

    <select id="findCompletedOrdersByRider" parameterType="int" resultType="order">
        SELECT * 
        FROM orders o
        JOIN deliveries d ON o.orders_id = d.orders_id
        JOIN delivery_history dh ON d.deliveries_id = dh.deliveries_id
        JOIN shop s ON o.shop_id = s.shop_id
        WHERE d.raiders_id = #{raiders_id} AND dh.delivery_history_status = '배달 완료'
    </select>

    <update id="updateDeliveryHistory">
        UPDATE delivery_history SET delivery_history_status = #{status}
        WHERE deliveries_id = (SELECT deliveries_id FROM deliveries WHERE orders_id = #{orders_id})
    </update>





</mapper>
