<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="first.final_project.dao.ShopMapper">


    <!-- 가게추가 -->
    <!-- <insert id="insert" parameterType="first.final_project.vo.ShopVo"> -->
        <insert id="insert" parameterType="shop">
        insert into shop (
            shop_id,
            shop_name, shop_img, shop_addr, food_category, shop_call, 
            shop_content, shop_min_price,  shop_rate, 
            shop_stemp_count, shop_review_count,
            shop_hours,
            shop_close_day,
            shop_area, shop_cdate, shop_mdate, shop_status, owner_id
        ) values (
            null,
            #{shop_name}, #{shop_img}, #{shop_addr}, #{food_category}, #{shop_call}, 
            #{shop_content}, #{shop_min_price}, default, 
            default, default, #{shop_hours},
            #{shop_close_day},
            #{shop_area}, default, default, #{shop_status}, #{owner_id}
        )
    </insert>

    <!-- 전체 리스트 조회  -->
    <select id="selectList" parameterType="String" resultType="shop">
    SELECT 
        s.*,
        (SELECT COUNT(*) FROM menu WHERE shop_id = s.shop_id) AS menu_count, 
        (SELECT COUNT(*) 
            FROM reviews r 
            INNER JOIN orders o ON o.orders_id = r.orders_id 
            WHERE o.shop_id = s.shop_id) AS reviews_count, 
        (SELECT AVG(r.reviews_rating) 
            FROM reviews r 
            INNER JOIN orders o ON o.orders_id = r.orders_id 
            WHERE o.shop_id = s.shop_id) AS shop_rating,
		(SELECT count(*)
			from ceoreview c
            inner join reviews r on c.reviews_id = r.reviews_id
            inner join orders o on o.orders_id = r.orders_id
            where o.shop_id = s.shop_id) as ceoreview_count
    FROM shop s
        <where>
            <if test="foodCategory != null and foodCategory != 'all'">
                AND food_category = #{foodCategory}
            </if>
        </where>
    </select>

    <!-- 가게 정렬 -->
    <select id="selectListValue" parameterType="map" resultType="shop">    
        SELECT         
            s.*,        
            (SELECT COUNT(*) FROM menu WHERE shop_id = s.shop_id) AS menu_count,         
            (SELECT COUNT(*)             
             FROM reviews r             
             INNER JOIN orders o ON o.orders_id = r.orders_id             
             WHERE o.shop_id = s.shop_id) AS reviews_count,         
            (SELECT AVG(r.reviews_rating)             
             FROM reviews r             
             INNER JOIN orders o ON o.orders_id = r.orders_id             
             WHERE o.shop_id = s.shop_id) AS shop_rating,		
            (SELECT COUNT(*)             
             FROM ceoreview c            
             INNER JOIN reviews r ON c.reviews_id = r.reviews_id            
             INNER JOIN orders o ON o.orders_id = r.orders_id            
             WHERE o.shop_id = s.shop_id) AS ceoreview_count    
        FROM shop s        
        <where>            
            <if test="food_category !=null and food_category != 'all'">                
                AND food_category = #{food_category}            
            </if>
            <if test="searchValue != null and searchValue !=''">
                AND shop_name LIKE CONCAT('%', '${searchValue}', '%')
            </if>
        </where>
        <if test="selectValue != null"> 
            ORDER BY 
            <choose>
                <when test="selectValue == 'rank'">
                    shop_id ASC 
                </when>
                <when test="selectValue == 'shop_rating'">
                    shop_rating DESC
                </when>
                <when test="selectValue == 'reviews_count'">
                    reviews_count DESC
                </when>
                <when test="selectValue == 'shop_min_price'">
                    shop_min_price ASC
                </when>
            </choose>
        </if>
    </select>

    <!-- 가게 1개 상세보기  -->
    <select id="selectOne" parameterType="int" resultType="shop">
        SELECT 
        s.*,o.owner_license,
        (SELECT COUNT(*) FROM menu WHERE shop_id = #{shop_id}) AS menu_count, 
        (SELECT COUNT(*) 
            FROM reviews r 
            INNER JOIN orders o ON o.orders_id = r.orders_id 
            WHERE o.shop_id = #{shop_id}) AS reviews_count, 
        (SELECT AVG(r.reviews_rating) 
            FROM reviews r 
            INNER JOIN orders o ON o.orders_id = r.orders_id 
            WHERE o.shop_id = #{shop_id}) AS shop_rating
    FROM shop s
    inner join owner o on o.owner_id = s.owner_id
    where s.shop_id = #{shop_id}
    </select>

    <!-- 가게 데이터 불러오기 -->
    <select id="select_modify_owner_id" parameterType="int" resultType="shop">
        select * from shop where owner_id = #{onwer_id}
    </select>

    <!-- shop_id 구하기 -->
    <select id="select_one_shop_id" parameterType="int">
        select shop_id from shop where owner_id = #{owner_id}
    </select>

    <select id="hasShop" parameterType="int" resultType="Boolean">
        select shop_id from shop where owner_id = #{owner_id}
    </select>

    <!-- <select id="selectMenuAndReviewsCount" parameterType="int" resultType="map">
        SELECT 
        (SELECT COUNT(*) FROM menu WHERE shop_id = #{shop_id}) AS menu_count, 
        (SELECT COUNT(*) FROM reviews r 
        INNER JOIN orders o ON o.orders_id = r.orders_id 
        WHERE o.shop_id = #{shop_id}) AS reviews_count
    </select> -->


    <!-- 가게 정보 업데이트 -->
    <update id="update" parameterType="shop">
        update shop set shop_name = #{shop_name},
                        shop_content = #{shop_content},
                        shop_addr = #{shop_addr},
                        shop_call = #{shop_call},
                        shop_min_price = #{shop_min_price},
                        shop_hours = #{shop_hours},
                        shop_close_day = #{shop_close_day},
                        shop_area = #{shop_area},
                        food_category = #{food_category},
                        shop_status = #{shop_status}
                        <if test="shop_img != null">
                            , shop_img = #{shop_img}
                        </if>
                    where shop_id = #{shop_id}
    </update>


    <!-- 가게 삭제하기 -->
    <delete id="delete" parameterType="int">
        delete from shop where shop_id = #{shop_id}
    </delete>

    

</mapper>